# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import recognizers_store_pb2 as recognizers__store__pb2


class RecognizersStoreServiceStub(object):
    """The Recognizers Store Service is a service that handles pattern recognizers in a persistent storage
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ApplyInsert = channel.unary_unary(
                '/types.RecognizersStoreService/ApplyInsert',
                request_serializer=recognizers__store__pb2.RecognizerInsertOrUpdateRequest.SerializeToString,
                response_deserializer=recognizers__store__pb2.RecognizersStoreResponse.FromString,
                )
        self.ApplyUpdate = channel.unary_unary(
                '/types.RecognizersStoreService/ApplyUpdate',
                request_serializer=recognizers__store__pb2.RecognizerInsertOrUpdateRequest.SerializeToString,
                response_deserializer=recognizers__store__pb2.RecognizersStoreResponse.FromString,
                )
        self.ApplyDelete = channel.unary_unary(
                '/types.RecognizersStoreService/ApplyDelete',
                request_serializer=recognizers__store__pb2.RecognizerDeleteRequest.SerializeToString,
                response_deserializer=recognizers__store__pb2.RecognizersStoreResponse.FromString,
                )
        self.ApplyGet = channel.unary_unary(
                '/types.RecognizersStoreService/ApplyGet',
                request_serializer=recognizers__store__pb2.RecognizerGetRequest.SerializeToString,
                response_deserializer=recognizers__store__pb2.RecognizersGetResponse.FromString,
                )
        self.ApplyGetAll = channel.unary_unary(
                '/types.RecognizersStoreService/ApplyGetAll',
                request_serializer=recognizers__store__pb2.RecognizersGetAllRequest.SerializeToString,
                response_deserializer=recognizers__store__pb2.RecognizersGetResponse.FromString,
                )
        self.ApplyGetHash = channel.unary_unary(
                '/types.RecognizersStoreService/ApplyGetHash',
                request_serializer=recognizers__store__pb2.RecognizerGetHashRequest.SerializeToString,
                response_deserializer=recognizers__store__pb2.RecognizerHashResponse.FromString,
                )


class RecognizersStoreServiceServicer(object):
    """The Recognizers Store Service is a service that handles pattern recognizers in a persistent storage
    """

    def ApplyInsert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyGetAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyGetHash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecognizersStoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ApplyInsert': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyInsert,
                    request_deserializer=recognizers__store__pb2.RecognizerInsertOrUpdateRequest.FromString,
                    response_serializer=recognizers__store__pb2.RecognizersStoreResponse.SerializeToString,
            ),
            'ApplyUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyUpdate,
                    request_deserializer=recognizers__store__pb2.RecognizerInsertOrUpdateRequest.FromString,
                    response_serializer=recognizers__store__pb2.RecognizersStoreResponse.SerializeToString,
            ),
            'ApplyDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyDelete,
                    request_deserializer=recognizers__store__pb2.RecognizerDeleteRequest.FromString,
                    response_serializer=recognizers__store__pb2.RecognizersStoreResponse.SerializeToString,
            ),
            'ApplyGet': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyGet,
                    request_deserializer=recognizers__store__pb2.RecognizerGetRequest.FromString,
                    response_serializer=recognizers__store__pb2.RecognizersGetResponse.SerializeToString,
            ),
            'ApplyGetAll': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyGetAll,
                    request_deserializer=recognizers__store__pb2.RecognizersGetAllRequest.FromString,
                    response_serializer=recognizers__store__pb2.RecognizersGetResponse.SerializeToString,
            ),
            'ApplyGetHash': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyGetHash,
                    request_deserializer=recognizers__store__pb2.RecognizerGetHashRequest.FromString,
                    response_serializer=recognizers__store__pb2.RecognizerHashResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'types.RecognizersStoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RecognizersStoreService(object):
    """The Recognizers Store Service is a service that handles pattern recognizers in a persistent storage
    """

    @staticmethod
    def ApplyInsert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/types.RecognizersStoreService/ApplyInsert',
            recognizers__store__pb2.RecognizerInsertOrUpdateRequest.SerializeToString,
            recognizers__store__pb2.RecognizersStoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/types.RecognizersStoreService/ApplyUpdate',
            recognizers__store__pb2.RecognizerInsertOrUpdateRequest.SerializeToString,
            recognizers__store__pb2.RecognizersStoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/types.RecognizersStoreService/ApplyDelete',
            recognizers__store__pb2.RecognizerDeleteRequest.SerializeToString,
            recognizers__store__pb2.RecognizersStoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/types.RecognizersStoreService/ApplyGet',
            recognizers__store__pb2.RecognizerGetRequest.SerializeToString,
            recognizers__store__pb2.RecognizersGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyGetAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/types.RecognizersStoreService/ApplyGetAll',
            recognizers__store__pb2.RecognizersGetAllRequest.SerializeToString,
            recognizers__store__pb2.RecognizersGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyGetHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/types.RecognizersStoreService/ApplyGetHash',
            recognizers__store__pb2.RecognizerGetHashRequest.SerializeToString,
            recognizers__store__pb2.RecognizerHashResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
